from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential            #序列,結構(自動全連接)
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D
from keras.preprocessing.image import ImageDataGenerator

#導入cifar10圖庫
from tensorflow.keras.datasets import cifar10
( X_train, y_train ), ( X_test, y_test ) = cifar10.load_data()
#( X_train, y_train ), ( X_test, y_test )形狀
print( X_train.shape )
print( X_test.shape )
print( y_train.shape )
print( y_test.shape )

#處理維度問題
#使用 keras.utils.to_categorical 對十類標籤進行 One-hot 編碼，以供後來Softmax分類。
#x通过模型之后会得到一个shape为（None,10）的数据， 而y因为没有进行one_hot编码，y.shape=(None, 1),形状不同所以不能进行计算
from keras.utils import np_utils
from tensorflow.keras.utils import to_categorical 
#x_train = X_train.astype('float32')/255
#x_test = X_test.astype('float32')/255
#y_train = np_utils.to_categorical(y_train)
#y_test = np_utils.to_categorical(y_test)

#降維
#使用 keras.utils.to_categorical 對十類標籤進行 One-hot 編碼,形成2進位置，以供後來Softmax分類。
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
#訓練模型(CNN模型-分層)
#2層捲積層1層池化層1層平坦層2層連接層
model = Sequential()
#兩個二維卷積層,64個卷積核,尺寸為3×3,邊距相同,激勵函數"relu",輸入數據維度為(32*32*3)
model.add( Conv2D( filters=64,kernel_size = (3,3),input_shape = (32,32,3), activation = 'relu' ,padding="same") )
model.add( Conv2D( filters=64, kernel_size = (3,3),input_shape = (32,32,3),activation = 'relu' ,padding="same") )
#池化層窗口為2
model.add( MaxPool2D( pool_size = 2) )
#平坦層
model.add( Flatten())
#2個全連接層,神經元10到1024個,激勵函數"relu"跟"Softmax"
model.add( Dense( 1024, activation = 'relu'))
model.add( Dense( 10, activation = 'softmax'))
#設定參數為,優化器"adam",損失函數"binary_crossentropy"(交叉熵损失函数),並加入正確率
#model.compile(optimizer = 优化器，loss = 损失函数，metrics = ["准确率”])
model.compile( loss = 'binary_crossentropy',optimizer = 'adam', metrics = ['accuracy'])

#模型結構
model.summary()
#2層捲積層1層池化層1層平坦層2層連接層

#訓練模型並導入可視化圖表
#導入影像資料生成器
from keras.preprocessing.image import ImageDataGenerator       
#影像資料生成器參數設定
generated_data = ImageDataGenerator(featurewise_center=False, samplewise_center=False, featurewise_std_normalization=False, 
                                    samplewise_std_normalization=False, zca_whitening=False, rotation_range=0,zoom_range = 0,  
                                    width_shift_range=0.1, height_shift_range=0, horizontal_flip = True, vertical_flip = False)
    
#開始訓練
#一次訓練資料量128次,訓練30次
#model.fit_generator(generated_data.flow(X_train, y_train,batch_size=128), steps_per_epoch=X_train.shape[0]//8, epochs=1, validation_data=(X_test, y_test))
history=model.fit_generator(generated_data.flow(X_train, y_train,batch_size=128),epochs=50, validation_data=(X_test, y_test))

#算模型好不好
from sklearn.metrics import roc_auc_score

predictions= model.predict( X_test )
predictions[0],y_test[0]
roc_auc_score( y_test, predictions )  #越接近1越好

#訓練結果做成圖表(損失值與次數)
import numpy as np
import matplotlib.pyplot as plt
plt.plot(history.history["loss"],c = "green")
plt.plot(history.history["val_loss"],c = "orange")
plt.title("Loss")
plt.ylabel("Loss")
plt.xlabel("Epochs")
plt.legend(["train", "test"])
plt.show()

#訓練結果做成圖表(正確率與數字)
plt.plot(history.history["accuracy"],c = "green")
plt.plot(history.history["val_accuracy"],c = "orange")
plt.title("Accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epochs")
plt.legend(["train", "test"])
plt.show()

#儲存模型
model.save("cifar10_train.h5")
#可視化預測結果
#定義標籤
label_dict={0:"airplane",1:"automobile",2:"bird",3:"cat",4:"deer",
            5:"dog",6:"frog",7:"horse",8:"ship",9:"truck"}
#定義顯示圖像查及其對應標籤的運作
def plot_images_labels_prediction(images,             # 圖像列表
                                  labels,             # 標籤列表 
                                  prediction,         # 預測值列表
                                  index,              # 從index開始顯示
                                  num=5):            # 一次顯示5個

    fig=plt.gcf()                                     #獲取當前圖表Get Current Figure 
    fig.set_size_inches (12, 8)                       #此吋大小
    if num > 10:
        num=10
    for i in range(0,num):
        ax=plt.subplot (2, 5, i+ 1)                       
        ax.imshow(images[index],cmap='binary')
          #顯示圖表標題信息
        title=str(i)+","+ label_dict[np.argmax(labels[index])] 
        if len(prediction) > 0:
            title+='=>' +label_dict[np. argmax(predictions[index])]

        ax.set_title(title, fontsize = 10)
        index += 1

    plt.show()

plot_images_labels_prediction(X_test,y_test,predictions,0,10)

#https://keras.io/zh/examples/cifar10_cnn/
#https://www.kaggle.com/code/erkamk/brain-tumor-classification?scriptVersionId=58429956
#https://blog.csdn.net/m0_59324564/article/details/124998992
